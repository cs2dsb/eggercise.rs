#!/usr/bin/env bash

# Exit when any command fails
set -o errexit

# Exit when an undeclared variable is used
set -o nounset

# Exit when a piped command returns a non-zero exit code
set -o pipefail

# Script to increment the patch version, tag it and push it
# $1 is the tag comment. Defaults to something generic if not provided
# Set NOBUMP=true to skip bumping the version (for when it's already been changed)
# Set BUMP={major, minor, patch} to set the kind of bump to do. Defaults to patch

readonly repo_dir="$( cd $(dirname ${BASH_SOURCE}); cd ..; pwd )";
cd $repo_dir

readonly deploy_branch=deploy;

warn() { echo "$@" >&2; }
die() { warn "$@"; exit 1; }

if [ -n "$(git status --porcelain)" ]; then
    die "Working directory isn't clean. Please commit or stash outstanding work"
fi

if [ "${NOBUMP:-}" != "true" ]; then
    readonly bump=${BUMP:-patch};
    ${repo_dir}/scripts/bump_version $bump
    git add -u
fi

readonly version=`cat Cargo.toml | sed -n '/^version *=* */{s///;s/^"//;s/"$//;p;}'`;
if [ "$version" == "" ]; then
    die "Failed to extract version from Cargo.toml"
fi

readonly tag="v${version}";
readonly tag_message="${1:-Release of ${tag}}";

git status

read -r -p "About to create and push tag \"${tag}\" with annotation \"${tag_message}\". Continue? [Y/n]" response
response=${response,,}    # tolower
if [[ "$response" =~ ^(yes|y|)$ ]]; then
    if [ "${NOBUMP:-}" != "true" ]; then
        git commit --no-verify -a -m "Bumped version number to ${version}"
    fi

    # Push before doing anything else to fail early if there's some conflict
    git push origin main

    # Tag and push the tag
    git tag -a "${tag}" -m "${tag_message}"
    git push origin "tags/${tag}"

    # Fetch the deploy branch in case someone else has updated it
    git fetch -q origin $deploy_branch | true
    
    # Create it if it doesn't exist
    if ! git show-ref --quiet refs/heads/$deploy_branch; then
        git checkout -b $deploy_branch main
    else 
        git checkout $deploy_branch
    fi

    # Merge from main
    git merge --no-ff main --no-edit

    # Push the changes
    git push origin $deploy_branch

    # Go back to main
    git checkout main
else 
    echo "Aborted"
fi