name: Deploy

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: üîß Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: üîé Get tag 
        id: tag
        uses: dawidd6/action-get-tag@v1
        # Because it can be kicked off manually there may not be a tag
        continue-on-error: true

      - name: üîç Set build suffix 
        run: |
          echo "SUFFIX=$([[ "${{ steps.tag.outputs.tag }}" = "" ]] && echo $GITHUB_SHA || echo ${{ steps.tag.outputs.tag }})" >> $GITHUB_ENV
          DATE=$(date +'%Y-%m-%d_%H%M%S')
          REPO=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
          
          echo ref_name = ${{  github.ref_name }}
          echo "DATE=$DATE" | tee -a $GITHUB_ENV
          echo "TAG=$([[ "${{ steps.tag.outputs.tag }}" = "" ]] && echo "main_$DATE" || echo "${{ steps.tag.outputs.tag }}")" | tee -a $GITHUB_ENV
          echo "REPO_NAME=$REPO" | tee -a $GITHUB_ENV
          echo "REPO_OWNER=$GITHUB_REPOSITORY_OWNER" | tee -a $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.REGISTRY }}/$GITHUB_REPOSITORY_OWNER/$REPO:latest" | tee -a $GITHUB_ENV
          echo "IMAGE_NAME=$REPO" | tee -a $GITHUB_ENV

      - name: üõí Checkout repo
        uses: actions/checkout@master

      - name: üéØ Cache target dir (restore)
        id: cache
        uses: actions/cache@v4
        with:
          key: ${{ env.REPO_NAME }}_target_cache
          path: target

      - name: ü™≤ Cache debug
        run: |
          mkdir -p target
          echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
          echo "ls -lh target: `ls -lh target`"
          echo "tree:"
          tree

      - name: üíâ Inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "target": "/server/target"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}
          save-always: true

      - name: üîë Log into registry ${{ env.REGISTRY }} 
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Build docker 
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ü™≤ Cache debug after
        run: |
          echo "ls -lh target: `ls -lh target`"
          echo "tree:"
          tree

      - name: üóúÔ∏è Package output 
        id: package_image
        if: false
        run: |
          set -euo pipefail
          docker pull ${{ env.IMAGE_TAG }}
          docker save ${{ env.IMAGE_TAG }} | zstd -o "${{ env.REPO_NAME }}-${{ env.SUFFIX }}-image.tar.zstd"

      # - name: Bench
      #   run: |
      #     set -euo pipefail
      #     cores=`nproc`
      #     echo cores=$cores
      #     mkdir bench
      #     cd bench
      #     tar -xf "../${{ env.REPO_NAME }}-${{ env.SUFFIX }}-image.tar.zstd"
      #     find . -name \*.tar\* -exec tar -xf {} \;

      #     # tree

      #     target=`find . -name target -type d`
      #     # echo target=$target
      #     time ../scripts/ptar --threads 0 compress --in-path "$target" --out-dir ./target_0_cores/
      #     time ../scripts/ptar --threads 1 compress --in-path "$target" --out-dir ./target_1_cores/
      #     time ../scripts/ptar --threads 8 compress --in-path "$target" --out-dir ./target_8_cores/
      #     time ../scripts/ptar --threads $cores compress --in-path "$target" --out-dir ./target_cores_cores/
      #     time tar -I lz4 -cf ./target_.tar.lz4 "$target"
      #     time tar -I zstd -cf ./target_.tar.zstd "$target"
      #     ls -lh ./target_*


      - name: üì° Upload release 
        uses: svenstaro/upload-release-action@v2
        if: steps.package_image.outcome == 'success'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "*.tar.*"
          tag: ${{ env.TAG }}
          overwrite: true
          file_glob: true
          prerelease: true

      - name: üì® Release release 
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "README.md"
          tag: ${{ env.TAG }}
          overwrite: true
          promote: true
          prerelease: false