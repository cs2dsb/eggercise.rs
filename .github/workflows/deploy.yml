name: Deploy

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

on:
  push:
    branches:
      - deploy
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write 
      id-token: write 
      packages: write
      attestations: write

    environment:
      name: github-pages
      url: ${{ steps.deploy_pages.outputs.page_url }}

    steps:
      - name: üîß Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: üîé Get tag 
        id: tag
        uses: dawidd6/action-get-tag@v1
        # Because it can be kicked off manually there may not be a tag
        continue-on-error: true

      - name: üîç Set build suffix 
        run: |
          echo "SUFFIX=$([[ "${{ steps.tag.outputs.tag }}" = "" ]] && echo $GITHUB_SHA || echo ${{ steps.tag.outputs.tag }})" >> $GITHUB_ENV
          DATE=$(date +'%Y-%m-%d_%H%M%S')
          REPO=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
          
          echo ref_name = ${{  github.ref_name }}
          echo "DATE=$DATE" | tee -a $GITHUB_ENV
          echo "TAG=$([[ "${{ steps.tag.outputs.tag }}" = "" ]] && echo "main_$DATE" || echo "${{ steps.tag.outputs.tag }}")" | tee -a $GITHUB_ENV
          echo "REPO_NAME=$REPO" | tee -a $GITHUB_ENV
          echo "REPO_OWNER=$GITHUB_REPOSITORY_OWNER" | tee -a $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.REGISTRY }}/$GITHUB_REPOSITORY_OWNER/$REPO:$([[ "${{ github.ref }}" == "refs/heads/deploy" ]] && echo "latest" || echo "main")" | tee -a $GITHUB_ENV
          echo "IMAGE_NAME=$REPO" | tee -a $GITHUB_ENV

      - name: üõí Checkout repo
        uses: actions/checkout@master

      - name: üéØ Cache target dir (restore)
        id: cache
        uses: actions/cache@v4
        with:
          key: ${{ env.REPO_NAME }}_target_and_registry_cache-${{ hashFiles('**/Cargo.toml') }}
          path: |
            target
            cargo_registry
          restore-keys: |
            ${{ env.REPO_NAME }}_target_and_registry_cache-
            ${{ env.REPO_NAME }}_target_cache-
          save-always: true

      - name: ü™≤ Cache debug
        run: |
          mkdir -p target
          mkdir -p cargo_registry
          echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
          echo "du -sh target/*: `(cd target; du -sh *)`"
          echo "du -sh cargo_registry/*: `(cd cargo_registry; du -sh *)`"

      - name: Build the project in docker
        uses: addnab/docker-run-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image: ghcr.io/cs2dsb/eggercise.rs/rust/nightly:latest
          options: |
            -e RUSTUP_PERMIT_COPY_RENAME=false
            -v ${{ github.workspace }}/:/server
            -v ${{ github.workspace }}/cargo_registry:/usr/local/cargo/registry
            -w /server
          run: |
            set -e
            echo $CARGO_HOME:
            (cd $CARGO_HOME; du -sh * || true)
            echo target before:
            (cd target; du -sh * || true)
            cargo build --release --bin server
            echo target after:
            (cd target; du -sh * || true)
            mkdir -p /server/dist
            cd /server/dist
            cp ../target/release/server .
            cp -r ../crates/server/assets .
            cd /server
            cargo doc \
                --release \
                --no-deps \
                --workspace \
                --all-features \
                --document-private-items
            echo '<meta http-equiv="refresh" content="0;url=server/index.html">' \
                | tee target/doc/index.html
            rm target/doc/.lock
            echo target after doc:
            (cd target; du -sh * || true)
            echo $CARGO_HOME after:
            (cd $CARGO_HOME; du -sh * || true)
      
      - name: Fix the permissions after docker mucked them up
        run: |
          sudo chown -R $USER:$USER "${{ github.workspace }}"

      - name: ü™≤ Cache debug after run
        run: |
          echo "du -sh target/*: `(cd target; du -sh * || true)`"
          echo "du -sh cargo_registry/*: `(cd cargo_registry; du -sh * || true)`"

      - name: üîë Log into registry ${{ env.REGISTRY }} 
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Build docker 
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          file: ./docker/Dockerfile

      - name: üóúÔ∏è Package output 
        if: github.ref == 'refs/heads/deploy'
        id: package_image
        run: |
          set -euo pipefail
          docker pull ${{ env.IMAGE_TAG }}
          docker save ${{ env.IMAGE_TAG }} | zstd -o "${{ env.REPO_NAME }}-${{ env.SUFFIX }}-image.tar.zstd"

      - name: üóúÔ∏è Archive service scripts
        if: github.ref == 'refs/heads/deploy'
        run: |
          set -x
          tar --transform 's/.*\///g' -czf service_scripts_linux.tar.gz README.md scripts/service

      - name: üì° Upload release 
        uses: svenstaro/upload-release-action@v2
        if: github.ref == 'refs/heads/deploy'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "*.tar.*"
          tag: ${{ env.TAG }}
          overwrite: true
          file_glob: true
          prerelease: true

      - name: üì® Release release 
        if: github.ref == 'refs/heads/deploy'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "README.md"
          tag: ${{ env.TAG }}
          overwrite: true
          promote: true
          prerelease: false

      - name: Setup pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc

      - name: Deploy to GitHub Pages
        id: deploy_pages
        uses: actions/deploy-pages@v4